// // const User = require('../models/user');
// // const bcrypt = require('bcryptjs');
// // const jwt = require('jsonwebtoken');
// // // Generar token JWT
// // // const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

// // const loginUser = async (req, res) => {
// //     try {
// //         const { username, password } = req.body;

// //         // Buscar al usuario por nombre de usuario
// //         const user = await User.findOne({ username });
// //         if (!user) {
// //             return res.status(400).json({ message: 'Usuario no encontrado' });
// //         }

// //         // Verificar la contraseña
// //         const isMatch = await bcrypt.compare(password, user.password);
// //         if (!isMatch) {
// //             return res.status(400).json({ message: 'Contraseña incorrecta' });
// //         }

// //         // Generar token JWT
// //         const token = jwt.sign({ userId: user._id }, 'TU_SECRET_KEY', { expiresIn: '1h' });

// //         res.json({ message: 'Inicio de sesión exitoso', token });
// //     } catch (error) {
// //         res.status(500).json({ message: 'Error al iniciar sesión', error });
// //     }
// // };

// // module.exports = { loginUser };
// *----------

const User = require('../models/user');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const loginUser = async (req, res) => {
  console.log('Datos recibidos:', req.body);
  try {
      const { password, email } = req.body; // Cambiar 'username' por 'email'

      // Buscar al usuario por correo electrónico
      const user = await User.findOne({ email }); // Asegúrate de que tu modelo User tenga un campo 'email'
      if (!user) {
          return res.status(400).json({ message: 'Usuario no encontrado' });
      }

      // Verificar la contraseña
      console.log('Contraseña en texto plano:', password);
      console.log('Contraseña almacenada:', user.password);
      
      // Hashear la contraseña en texto plano para ver el resultado (solo para propósitos de depuración)
      // const hashedPasswordForDebug = await bcrypt.hash(password, 12);
      // console.log('Hasheo manual de la contraseña para depuración:', hashedPasswordForDebug);

      const isMatch = await bcrypt.compare(password, user.password);

      console.log('Resultado de la comparación:', isMatch);
      
      if (!isMatch) {
        // console.log('Contraseñaaa incorrecta' + hashedPassword + ' ' + user.password);
          return res.status(400).json({ message: 'Contraseña es incorrecta' });
      }

      // Comparar las contraseñas en texto plano
    //   if (password !== user.password) {
    //     return res.status(400).json({ message: 'Contraseña es incorrecta' });
    // }
      console.log('Contraseñaaa NOO incorrecta');

      // Generar token JWT usando la clave secreta de las variables de entorno
      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

      // Generar token JWT
      res.json({ message: 'Inicio de sesión exitoso', token });
  } catch (error) {
      res.status(500).json({ message: 'Error al iniciar sesión', error });
  }
};


module.exports = { loginUser };

// *New LogIn
// const User = require('../models/user');
// const bcrypt = require('bcryptjs');

// exports.login = async (req, res) => {
//   try {
//     const { email, password } = req.body;

//     // Buscar el usuario por su correo electrónico
//     const user = await User.findOne({ email });
//     if (!user) {
//       return res.status(401).json({ message: 'Usuario no encontrado' });
//     }

//     // Comparar la contraseña enviada con la almacenada en la base de datos
//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(401).json({ message: 'Contraseña incorrecta' });
//     }

//     // Omitir la contraseña en la respuesta
//     const { password: _, ...userInfo } = user.toObject();

//     // Usuario autenticado con éxito
//     res.json({ message: 'Inicio de sesión exitoso', user: userInfo });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ message: 'Error en el servidor' });
//   }
// };
